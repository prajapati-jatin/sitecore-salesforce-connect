<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="sitecore" type="Sitecore.Configuration.ConfigReader, Sitecore.Kernel"/>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, Sitecore.Logging"/>
  </configSections>
  <sitecore database="Fake">
    <salesforce>
      <salesforceManager defaultProvider="default">
        <providers>
          <clear/>
          <add name="default" type="Sitecore.Salesforce.SalesforceProvider, Sitecore.Salesforce"/>
        </providers>
      </salesforceManager>
      
      <clients>
        <client provider="salesforce" type="Sitecore.Salesforce.Client.SalesforceClient, Sitecore.Salesforce.Client" singleInstance="true">
          <param desc="authenticator" type="Sitecore.Salesforce.Client.Security.PasswordAuthenticator, Sitecore.Salesforce.Client">
            <consumerKey></consumerKey>
            <consumerSecret></consumerSecret>
            <userName></userName>
            <password></password>
            <securityToken></securityToken>
          </param>
        </client>
      </clients>

      <configurations>
        <configuration default="true" provider="default" type="Sitecore.Salesforce.Configuration.SalesforceConfiguration, Sitecore.Salesforce">
          <param desc="name">$(provider)</param>
          
          <client ref="salesforce/clients/*[@provider='$(provider)'][1]"/>
          
          <fieldMapping type="Sitecore.Salesforce.Configuration.SalesforceFieldMapping, Sitecore.Salesforce">
            <id>Id</id>
            <login>Email</login>
            <email>Email</email>
            <description>Description</description>
            <password>SC_Password__c</password>
            <passwordAnswer>SC_PasswordAnswer__c</passwordAnswer>
            <passwordQuestion>SC_PasswordQuestion__c</passwordQuestion>
            <isApproved>SC_IsApproved__c</isApproved>
            <isLockedOut></isLockedOut>
            <createdDate>CreatedDate</createdDate>
            <lastLoginDate>SC_LastLogin__c</lastLoginDate>
            <lastActivityDate>SC_LastActivity__c</lastActivityDate>
            <lastPasswordChangedDate>SC_LastPasswordChanged__c</lastPasswordChangedDate>
          </fieldMapping>

          <api type="Sitecore.Salesforce.Configuration.SalesforceApiConfiguration, Sitecore.Salesforce">
            <contactsApi type="Sitecore.Salesforce.Api.ContactsApi, Sitecore.Salesforce">
              <param desc="client" ref="salesforce/configurations/*[@provider='$(provider)'][1]/client"/>
              <param desc="fieldMapping" ref="salesforce/configurations/*[@provider='$(provider)'][1]/fieldMapping"/>
              <param desc="profileConfiguration" ref="salesforce/configurations/*[@provider='$(provider)'][1]/profile/properties"/>
              <contactObjectName>Contact</contactObjectName>
            </contactsApi>

            <rolesApi type="Sitecore.Salesforce.Api.RolesApi, Sitecore.Salesforce">
              <param desc="client" ref="salesforce/configurations/*[@provider='$(provider)'][1]/client"/>
              <param desc="fieldMapping" ref="salesforce/configurations/*[@provider='$(provider)'][1]/fieldMapping"/>
              <roleObjectName>SitecoreRole</roleObjectName>
              <roleAssociationObjectName>SitecoreRoleAssociation</roleAssociationObjectName>
              <relatedContactFieldName>Contact</relatedContactFieldName>
              <relatedSitecoreRoleFieldName>SitecoreRole</relatedSitecoreRoleFieldName>
            </rolesApi>
          </api>

          <profile type="Sitecore.Salesforce.Configuration.SalesforceProfileConfiguration, Sitecore.Salesforce">
            <properties type="Sitecore.Salesforce.Configuration.SalesforceProfilePropertiesConfiguration, Sitecore.Salesforce">
              <param desc="providerName">$(provider)</param>
            </properties>

            <inboundConverter type="Sitecore.Integration.Common.Convert.ConvertProvider, Sitecore.Integration.Common">
              <param desc="factory" type="Sitecore.Integration.Common.Convert.ConverterFactory, Sitecore.Integration.Common">
                <converters hint="list:RegisterConverter">
                  <add type="Sitecore.Salesforce.Convert.SalesforceDateTimeConverter, Sitecore.Salesforce"/>
                </converters>
              </param>
            </inboundConverter>
            <outboundConverter type="Sitecore.Integration.Common.Convert.ConvertProvider, Sitecore.Integration.Common">
              <param desc="factory" type="Sitecore.Integration.Common.Convert.ConverterFactory, Sitecore.Integration.Common">
                <converters hint="list:RegisterConverter">
                  <add type="Sitecore.Salesforce.Convert.SalesforceDateTimeConverter, Sitecore.Salesforce"/>
                </converters>
              </param>
            </outboundConverter>
          </profile>

          <cache type="Sitecore.Salesforce.Configuration.SalesforceCacheConfiguration, Sitecore.Salesforce">
            <users type="Sitecore.Salesforce.Caching.UserCache, Sitecore.Salesforce">
              <param desc="name">Salesforce_Users_$(provider)</param>
              <param desc="size">2MB</param>
              <param desc="slidingExpiration">00:02:00</param>
            </users>
            <roles type="Sitecore.Salesforce.Caching.RoleCache, Sitecore.Salesforce">
              <param desc="name">Salesforce_Roles_$(provider)</param>
              <param desc="size">2MB</param>
              <param desc="slidingExpiration">00:02:00</param>
            </roles>
            <members type="Sitecore.Salesforce.Caching.MembersCache, Sitecore.Salesforce">
              <param desc="name">Salesforce_Members_$(provider)</param>
              <param desc="size">2MB</param>
              <param desc="slidingExpiration">00:02:00</param>
            </members>
            <memberOf type="Sitecore.Salesforce.Caching.MemberOfCache, Sitecore.Salesforce">
              <param desc="name">Salesforce_MemberOf_$(provider)</param>
              <param desc="size">2MB</param>
              <param desc="slidingExpiration">00:02:00</param>
            </memberOf>
          </cache>
        </configuration>
      </configurations>
    </salesforce>

    <!-- SETTINGS -->
    <settings>
      <setting name="LicenseFile" value="..\..\..\Data\license.xml"/>
      <setting name="Caching.Enabled" value="false"/>

      <setting name="Salesforce.Disabled" value="false"/>
    </settings>
    <!-- LINK DATABASE -->
    <LinkDatabase type="Sitecore.FakeDb.Links.FakeLinkDatabase, Sitecore.FakeDb"/>
    <!-- TASK DATABASE -->
    <TaskDatabase type="Sitecore.FakeDb.Tasks.FakeTaskDatabase, Sitecore.FakeDb"/>
    <!-- PIPELINES -->
    <pipelines>
      <!-- FakeDb -->
      <initFakeDb>
        <processor type="Sitecore.FakeDb.Pipelines.InitFakeDb.InitDataProviders, Sitecore.FakeDb"/>
        <processor type="Sitecore.FakeDb.Pipelines.InitFakeDb.InitDataEngineCommands, Sitecore.FakeDb"/>
        <processor type="Sitecore.FakeDb.Pipelines.InitFakeDb.InitAuthorizationProvider, Sitecore.FakeDb"/>
        <processor type="Sitecore.FakeDb.Pipelines.InitFakeDb.InitStandardValuesProvider, Sitecore.FakeDb"/>
        <processor type="Sitecore.FakeDb.Pipelines.InitFakeDb.InitGlobals, Sitecore.FakeDb"/>
      </initFakeDb>
      <releaseFakeDb>
        <processor type="Sitecore.FakeDb.Pipelines.ReleaseFakeDb.ReleasePipelineWatcher, Sitecore.FakeDb"/>
        <processor type="Sitecore.FakeDb.Pipelines.ReleaseFakeDb.ResetDataProviders, Sitecore.FakeDb"/>
        <processor type="Sitecore.FakeDb.Pipelines.ReleaseFakeDb.ResetTemplateEngine, Sitecore.FakeDb"/>
        <processor type="Sitecore.FakeDb.Pipelines.ReleaseFakeDb.ResetFactory, Sitecore.FakeDb"/>
        <processor type="Sitecore.FakeDb.Pipelines.ReleaseFakeDb.ResetSettings, Sitecore.FakeDb"/>
      </releaseFakeDb>
      <addDbItem>
        <processor type="Sitecore.FakeDb.Pipelines.AddDbItem.SetStatistics, Sitecore.FakeDb"/>
        <processor type="Sitecore.FakeDb.Pipelines.AddDbItem.SetParent, Sitecore.FakeDb"/>
        <processor type="Sitecore.FakeDb.Pipelines.AddDbItem.CreateTemplate, Sitecore.FakeDb"/>
        <processor type="Sitecore.FakeDb.Pipelines.AddDbItem.EnsureIsChild, Sitecore.FakeDb"/>
        <processor type="Sitecore.FakeDb.Pipelines.AddDbItem.SetFullPath, Sitecore.FakeDb"/>
        <processor type="Sitecore.FakeDb.Pipelines.AddDbItem.CreateItem, Sitecore.FakeDb"/>
        <processor type="Sitecore.FakeDb.Pipelines.AddDbItem.AddVersion, Sitecore.FakeDb"/>
        <processor type="Sitecore.FakeDb.Pipelines.AddDbItem.CreateChildren, Sitecore.FakeDb"/>
        <processor type="Sitecore.FakeDb.Pipelines.AddDbItem.SetAccess, Sitecore.FakeDb"/>
      </addDbItem>
      <getTranslation>
        <processor type="Sitecore.FakeDb.Pipelines.GetTranslation.GetFakeTranslation, Sitecore.FakeDb"/>
      </getTranslation>
      <!-- Analytics -->
      <loadVisitor/>
    </pipelines>
    <dataProviders>
      <main type="Sitecore.FakeDb.Data.DataProviders.$(database)DataProvider, Sitecore.FakeDb">
        <CacheOptions.DisableAll>true</CacheOptions.DisableAll>
      </main>
    </dataProviders>
    <!-- DATABASES -->
    <databases>
      <!-- core -->
      <database id="core" type="Sitecore.Data.Database, Sitecore.Kernel" singleInstance="true">
        <param desc="name">$(id)</param>
        <dataProviders hint="list:AddDataProvider">
          <dataProvider ref="dataProviders/main"/>
        </dataProviders>
        <Engines.DataEngine.Commands.AddFromtemplatePrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.AddFromTemplateCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.AddVersionPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.AddVersionCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.BlobStreamExistsPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.BlobStreamExistsCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.CopyItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.CopyItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.CreateItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.CreateItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.DeletePrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.DeleteItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetBlobStreamPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetBlobStreamCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetChildrenPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetChildrenCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetParentPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetParentCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetRootItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetRootItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetVersionsPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetVersionsCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.HasChildrenPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.HasChildrenCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.MoveItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.MoveItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.RemoveDataPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.RemoveDataCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.RemoveVersionPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.RemoveVersionCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.ResolvePathPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.ResolvePathCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.SaveItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.SaveItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.SetBlobStreamPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.SetBlobStreamCommand, Sitecore.FakeDb"/>
      </database>
      <!-- master -->
      <database id="master" type="Sitecore.Data.Database, Sitecore.Kernel" singleInstance="true">
        <param desc="name">$(id)</param>
        <dataProviders hint="list:AddDataProvider">
          <dataProvider ref="dataProviders/main"/>
        </dataProviders>
        <Engines.DataEngine.Commands.AddFromtemplatePrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.AddFromTemplateCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.AddVersionPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.AddVersionCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.BlobStreamExistsPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.BlobStreamExistsCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.CopyItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.CopyItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.CreateItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.CreateItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.DeletePrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.DeleteItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetBlobStreamPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetBlobStreamCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetChildrenPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetChildrenCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetParentPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetParentCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetRootItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetRootItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetVersionsPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetVersionsCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.HasChildrenPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.HasChildrenCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.MoveItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.MoveItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.RemoveDataPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.RemoveDataCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.RemoveVersionPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.RemoveVersionCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.ResolvePathPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.ResolvePathCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.SaveItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.SaveItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.SetBlobStreamPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.SetBlobStreamCommand, Sitecore.FakeDb"/>
      </database>
      <!-- web -->
      <database id="web" type="Sitecore.Data.Database, Sitecore.Kernel" singleInstance="true">
        <param desc="name">$(id)</param>
        <dataProviders hint="list:AddDataProvider">
          <dataProvider ref="dataProviders/main"/>
        </dataProviders>
        <Engines.DataEngine.Commands.AddFromtemplatePrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.AddFromTemplateCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.AddVersionPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.AddVersionCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.BlobStreamExistsPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.BlobStreamExistsCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.CopyItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.CopyItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.CreateItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.CreateItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.DeletePrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.DeleteItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetBlobStreamPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetBlobStreamCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetChildrenPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetChildrenCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetParentPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetParentCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetRootItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetRootItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.GetVersionsPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.GetVersionsCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.HasChildrenPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.HasChildrenCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.MoveItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.MoveItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.RemoveDataPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.RemoveDataCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.RemoveVersionPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.RemoveVersionCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.ResolvePathPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.ResolvePathCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.SaveItemPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.SaveItemCommand, Sitecore.FakeDb"/>
        <Engines.DataEngine.Commands.SetBlobStreamPrototype type="Sitecore.FakeDb.Data.Engines.DataCommands.SetBlobStreamCommand, Sitecore.FakeDb"/>
      </database>
    </databases>
    <clientDataStore type="Sitecore.FakeDb.Configuration.ClientDataStoreStub, Sitecore.FakeDb"/>
    <!-- CONFIG STORES -->
    <configStores>
      <add name="globalRoles" type="Sitecore.Configuration.XmlConfigStore, Sitecore.Kernel">
        <param>roles</param>
      </add>
    </configStores>
    <!-- ITEM MANAGER -->
    <itemManager defaultProvider="default">
      <providers>
        <clear/>
        <add name="default" type="Sitecore.Data.Managers.ItemProvider, Sitecore.Kernel"/>
      </providers>
    </itemManager>
    <!-- DOMAINS -->
    <domainManager>
      <providers>
        <clear/>
        <add name="fake" type="Sitecore.FakeDb.SecurityModel.FakeDomainProvider, Sitecore.FakeDb"/>
      </providers>
    </domainManager>
    <!-- SITES -->
    <siteManager defaultProvider="config">
      <providers>
        <clear/>
        <add name="config" type="Sitecore.Sites.ConfigSiteProvider, Sitecore.Kernel" siteList="sites" checkSecurity="false"/>
      </providers>
    </siteManager>
    <!-- LINKS -->
    <linkManager defaultProvider="sitecore">
      <providers>
        <clear/>
        <add name="sitecore" type="Sitecore.Links.LinkProvider, Sitecore.Kernel" addAspxExtension="true" alwaysIncludeServerUrl="false" encodeNames="true" languageEmbedding="asNeeded" languageLocation="filePath" lowercaseUrls="false" shortenUrls="true" useDisplayName="false"/>
      </providers>
    </linkManager>
    <!-- STANDARD VALUES -->
    <standardValues defaultProvider="fake">
      <providers>
        <clear/>
        <add name="fake" type="Sitecore.FakeDb.Data.FakeStandardValuesProvider, Sitecore.FakeDb"/>
      </providers>
    </standardValues>
    <!-- AUTHENTICATION -->
    <authentication defaultProvider="switcher">
      <providers>
        <clear/>
        <add name="switcher" type="Sitecore.FakeDb.Security.Authentication.SwitchingAuthenticationProvider, Sitecore.FakeDb" defaultProvider="fake"/>
        <add name="fake" type="Sitecore.FakeDb.Security.Authentication.FakeAuthenticationProvider, Sitecore.FakeDb"/>
      </providers>
    </authentication>
    <!-- ROLES -->
    <rolesInRolesManager>
      <providers>
        <clear/>
        <add name="fake" type="Sitecore.FakeDb.Security.Accounts.FakeRolesInRolesProvider, Sitecore.FakeDb" globalRolesConfigStoreName="globalRoles"/>
      </providers>
    </rolesInRolesManager>
    <!-- AUTHORIZATION -->
    <authorization>
      <providers>
        <clear/>
        <add name="fake" type="Sitecore.FakeDb.Security.AccessControl.FakeAuthorizationProvider, Sitecore.FakeDb"/>
      </providers>
    </authorization>
    <!-- ACCESS RIGHTS -->
    <accessRights>
      <providers>
        <clear/>
        <add name="fake" type="Sitecore.FakeDb.Security.AccessControl.FakeAccessRightProvider, Sitecore.FakeDb"/>
      </providers>
    </accessRights>
    <!-- SEARCH -->
    <contentSearch>
      <configuration type="Sitecore.ContentSearch.ProviderIndexSearchConfiguration, Sitecore.ContentSearch"/>
    </contentSearch>
    <!-- DOMAINS -->
    <!--<domainManager defaultProvider="file">
      <providers>
        <clear />
        <add name="file" type="Sitecore.Security.Domains.ConfigStoreDomainProvider, Sitecore.Kernel" configStoreName="domains" />
        <add name="config" type="Sitecore.SecurityModel.ConfigDomainProvider, Sitecore.Kernel" domainList="domainManager/domains" defaultDomain="sitecore" />
      </providers>
      --><!-- Sample for use with config provider above --><!--
      <domains>
        <domain id="sitecore" type="Sitecore.Security.Domains.Domain, Sitecore.Kernel">
          <param desc="name">$(id)</param>
          <ensureAnonymousUser>false</ensureAnonymousUser>
        </domain>
        <domain id="extranet" type="Sitecore.Security.Domains.Domain, Sitecore.Kernel">
          <param desc="name">$(id)</param>
          <ensureAnonymousUser>true</ensureAnonymousUser>
        </domain>
        <domain id="default" type="Sitecore.Security.Domains.Domain, Sitecore.Kernel">
          <param desc="name">$(id)</param>
          <ensureAnonymousUser>true</ensureAnonymousUser>
          <isDefault>true</isDefault>
        </domain>
      <domain name="salesforce" AccountNameValidation=".+" ensureAnonymousUser="false" defaultProfileItemID="{4F2D283A-1035-498F-8E66-B02EC5B816E0}" />
      </domains>
    </domainManager>-->
    <!-- SWITCHING PROVIDERS -->
    <switchingProviders>
      <membership>
        <provider providerName="salesforce" storeFullNames="true" wildcard="%" domains="*"/>
      </membership>
      <roleManager>
        <provider providerName="salesforce" storeFullNames="true" wildcard="%" domains="*"/>
      </roleManager>
      <profile>
        <provider providerName="salesforce" storeFullNames="true" wildcard="%" domains="*"/>
      </profile>
    </switchingProviders>
    <mediaLibrary>
      <!-- MEDIA PROVIDER -->
      <mediaProvider type="Sitecore.FakeDb.Resources.Media.FakeMediaProvider, Sitecore.FakeDb"/>
    </mediaLibrary>
  </sitecore>
  <log4net/>
  <system.web>
    <membership defaultProvider="sitecore" hashAlgorithmType="SHA1">
      <providers>
        <clear/>
        <add name="sitecore" type="Sitecore.Security.SitecoreMembershipProvider, Sitecore.Kernel" realProviderName="switcher" providerWildcard="%" raiseEvents="true"/>
        <add name="switcher" type="Sitecore.Security.SwitchingMembershipProvider, Sitecore.Kernel" applicationName="sitecore" mappings="switchingProviders/membership"/>
        <add name="salesforce" type="Sitecore.Salesforce.Security.SalesforceMembershipProvider, Sitecore.Salesforce" applicationName="sitecore" readOnly="false" loginFieldName="Email" enablePasswordReset="true" minRequiredPasswordLength="1" passwordStrengthRegularExpression=".*" minRequiredNonalphanumericCharacters="0" maxInvalidPasswordAttempts="5" passwordAttemptWindow="0" requiresQuestionAndAnswer="false" requiresUniqueEmail="true"/>
      </providers>
    </membership>
    <roleManager defaultProvider="sitecore" enabled="true">
      <providers>
        <clear/>
        <add name="sitecore" type="Sitecore.Security.SitecoreRoleProvider, Sitecore.Kernel" realProviderName="switcher" raiseEvents="true"/>
        <add name="switcher" type="Sitecore.Security.SwitchingRoleProvider, Sitecore.Kernel" applicationName="sitecore" mappings="switchingProviders/roleManager"/>
        <add name="salesforce" type="Sitecore.Salesforce.Security.SalesforceRoleProvider, Sitecore.Salesforce" readOnly="false"/>
      </providers>
    </roleManager>
    <profile defaultProvider="sitecore" enabled="true" inherits="Sitecore.FakeDb.Profile.FakeUserProfile, Sitecore.FakeDb">
      <providers>
        <clear/>
        <add name="salesforce" type="Sitecore.Salesforce.Profile.SalesforceProfileProvider, Sitecore.Salesforce" readOnly="false"/>
        <add name="switcher" type="Sitecore.Security.SwitchingProfileProvider, Sitecore.Kernel" applicationName="sitecore" mappings="switchingProviders/profile"/>
      </providers>
      <properties>
        <clear/>
        <add type="System.String" name="SC_UserData"/>
      
        <add type="System.String" name="FirstName" customProviderData="salesforce|FirstName"/>
        <add type="System.String" name="LastName" customProviderData="salesforce|LastName"/>
        <add type="System.String" name="JobTitle" customProviderData="salesforce|Title"/>
        <add type="System.String" name="Phone" customProviderData="salesforce|Phone"/>
      </properties>
    </profile>
  </system.web>
<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6"/></startup></configuration>
